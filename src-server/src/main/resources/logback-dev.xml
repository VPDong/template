<?xml version="1.0" encoding="UTF-8"?>
<configuration scan="true" scanPeriod="60" debug="false">
	<!-- %d日期，%t线程名，%c类的全名，%p日志级别，%file文件名，%line行数，%m%n输出的信息 -->
	<contextName>logback</contextName>

	<property name="LOG_HOME" value="data/logs"/>
	<property name="LOG_HISTORY" value="9"/>
	<property name="LOG_MAXSIZE" value="16MB"/>
	<property name="LOG_CHARSET" value="UTF-8"/>
	<property name="LOG_PATTERN"
	          value="[%d{yyyy/MM/dd-HH:mm:ss}] [%-5level] [%thread] [%logger:%line]--%mdc{client} %msg%n"/>

	<appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
		<!--System.out或System.err, 默认System.out-->
		<target>System.out</target>
		<!-- 对记录进行格式化 -->
		<encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
			<charset>${LOG_CHARSET}</charset>
			<pattern>${LOG_PATTERN}</pattern>
		</encoder>
		<!-- 级别过滤器，根据日志级别进行过滤，用的是ThresholdFilter过滤器 -->
		<filter class="ch.qos.logback.classic.filter.ThresholdFilter">
			<level>INFO</level>
		</filter>
	</appender>

	<appender name="FILE_DEBUG" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<file>${LOG_HOME}/log_debug.log</file>
		<encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
			<charset>${LOG_CHARSET}</charset>
			<pattern>${LOG_PATTERN}</pattern>
		</encoder>
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>DEBUG</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<fileNamePattern>${LOG_HOME}/log_debug.%d{yyyy-MM-dd}.log.%i.gz</fileNamePattern>
			<maxHistory>${LOG_HISTORY}</maxHistory>
			<timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<maxFileSize>${LOG_MAXSIZE}</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
		</rollingPolicy>
	</appender>

	<appender name="FILE_INFOS" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!-- 日志文件保存路径 -->
		<file>${LOG_HOME}/log_infos.log</file>
		<!-- 对记录进行格式化 -->
		<encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
			<charset>${LOG_CHARSET}</charset>
			<pattern>${LOG_PATTERN}</pattern>
		</encoder>
		<!-- 级别过滤器，根据日志级别进行过滤，用的是LevelFilter过滤器 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>INFO</level>
			<!-- 用于配置符合过滤条件的操作ACCEPT：日志会被立即处理，不再经过剩余过滤器 -->
			<onMatch>ACCEPT</onMatch>
			<!-- 用于配置不符合过滤条件的操作DENY：日志将立即被抛弃，不再经过其他过滤器 -->
			<onMismatch>DENY</onMismatch>
		</filter>
		<!-- 日志滚动策略，决定RollingFileAppender的行为，涉及文件移动和重命名 -->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!-- 必选节点，设置日志命名模式，包含文件名及"%d"和"%i"转换符 -->
			<fileNamePattern>${LOG_HOME}/log_infos.%d{yyyy-MM-dd}.log.%i.gz</fileNamePattern>
			<!-- 可选节点，设置日志保留模式，控制保留的归档文件的最大数量，超出数量就删除旧文件 -->
			<maxHistory>${LOG_HISTORY}</maxHistory>
			<!-- 可选节点，设置日志文件大小，决定日志翻滚，默认10M -->
			<timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<!-- 除按日志记录之外，还配置了日志文件不能超过的大小，若超过日志文件会以索引0开始 -->
				<maxFileSize>${LOG_MAXSIZE}</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
		</rollingPolicy>
	</appender>

	<appender name="FILE_ERROR" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<file>${LOG_HOME}/log_error.log</file>
		<encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
			<charset>${LOG_CHARSET}</charset>
			<pattern>${LOG_PATTERN}</pattern>
		</encoder>
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>ERROR</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<fileNamePattern>${LOG_HOME}/log_error.%d{yyyy-MM-dd}.log.%i.gz</fileNamePattern>
			<maxHistory>${LOG_HISTORY}</maxHistory>
			<timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<maxFileSize>${LOG_MAXSIZE}</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
		</rollingPolicy>
	</appender>

	<appender name="SQL_ERROR" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<file>${LOG_HOME}/sql_error.log</file>
		<encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
			<charset>${LOG_CHARSET}</charset>
			<pattern>${LOG_PATTERN}</pattern>
		</encoder>
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>ERROR</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<fileNamePattern>${LOG_HOME}/sql_error.%d{yyyy-MM-dd}.log.%i.gz</fileNamePattern>
			<maxHistory>${LOG_HISTORY}</maxHistory>
			<timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<maxFileSize>${LOG_MAXSIZE}</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
		</rollingPolicy>
	</appender>

	<!--是一个特殊<logger>元素，只有一个level属性，level默认debug-->
	<root level="debug">
		<appender-ref ref="STDOUT"/>
		<!--<appender-ref ref="FILE_DEBUG"/>-->
		<appender-ref ref="FILE_INFOS"/>
		<appender-ref ref="FILE_ERROR"/>
	</root>
</configuration>
